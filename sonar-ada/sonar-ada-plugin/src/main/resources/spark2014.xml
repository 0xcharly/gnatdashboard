<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ GNATdashboard
  ~ Copyright (C) 2017, AdaCore
  ~
  ~ This is free software;  you can redistribute it  and/or modify it  under
  ~ terms of the  GNU General Public License as published  by the Free Soft-
  ~ ware  Foundation;  either version 3,  or (at your option) any later ver-
  ~ sion.  This software is distributed in the hope  that it will be useful,
  ~ but WITHOUT ANY WARRANTY;  without even the implied warranty of MERCHAN-
  ~ TABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
  ~ License for  more details.  You should have  received  a copy of the GNU
  ~ General  Public  License  distributed  with  this  software;   see  file
  ~ COPYING3.  If not, go to http://www.gnu.org/licenses for a complete copy
  ~ of the license.
  -->

<rules>
  <rule>
    <key>vc_division_check</key>
    <name>divide by zero</name>
    <description>Check that the second operand of the division, mod or rem operation is different from zero.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_index_check</key>
    <name>index check</name>
    <description>Check that the given index is within the bounds of the array.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_overflow_check</key>
    <name>overflow check</name>
    <description>Check that the result of the given integer arithmetic operation is within the bounds of the base type.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_fp_overflow_check</key>
    <name>fp_overflow check</name>
    <description>Check that the result of the given floating point operation is within the bounds of the base type.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_range_check</key>
    <name>range check</name>
    <description>Check that the given value is within the bounds of the expected scalar subtype.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_predicate_check</key>
    <name>predicate check</name>
    <description>Check that the given value respects the applicable type predicate.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_predicate_check_on_default_value</key>
    <name>predicate check on default value</name>
    <description>Check that the default value for the type respects the applicable type predicate.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_length_check</key>
    <name>length check</name>
    <description>Check that the given array is of the length of the expected array subtype.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_discriminant_check</key>
    <name>discriminant check</name>
    <description>Check that the discriminant of the given discriminated record has the expected value. For variant records, this can happen for a simple access to a record field. But there are other cases where a fixed value of the discriminant is required.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_tag_check</key>
    <name>tag check</name>
    <description>Check that the tag of the given tagged object has the expected value.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_ceiling_interrupt</key>
    <name>ceiling priority in Interrupt_Priority</name>
    <description>Check that the ceiling priority specified for a protected object containing a procedure with an aspect Attach_Handler is in Interrupt_Priority</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_interrupt_reserved</key>
    <name>interrupt is reserved</name>
    <description>Check that the interrupt specified by Attach_Handler is not reserved</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_ceiling_priority_protocol</key>
    <name>ceiling priority protocol</name>
    <description>Check that the ceiling priority protocol is respected, i.e., when a task calls a protected operation, the active priority of the task is not higher than the priority of the protected object (ARM Annex D.3)</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_task_termination</key>
    <name>task termination</name>
    <description>Check that the task does not terminate, as required by Ravenscar</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>run-time-check</tag>
  </rule>
  <rule>
    <key>vc_initial_condition</key>
    <name>initial condition</name>
    <description>Check that the initial condition of a package is true after elaboration.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_default_initial_condition</key>
    <name>default initial condition</name>
    <description>Check that the default initial condition of a type is true after default initialization of an object of the type.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_precondition</key>
    <name>precondition</name>
    <description>Check that the precondition aspect of the given call evaluates to True.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_precondition_main</key>
    <name>precondition of main</name>
    <description>Check that the precondition aspect of the given main procedure evaluates to True after elaboration.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_postcondition</key>
    <name>postcondition</name>
    <description>Check that the postcondition aspect of the subprogram evaluates to True.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_refined_post</key>
    <name>refined postcondition</name>
    <description>Check that the refined postcondition aspect of the subprogram evaluates to True.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_contract_case</key>
    <name>contract case</name>
    <description>Check that all cases of the contract case evaluate to true at the end of the subprogram.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_disjoint_contract_cases</key>
    <name>disjoint contract cases</name>
    <description>Check that the cases of the contract cases aspect are all mutually disjoint.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_complete_contract_cases</key>
    <name>complete contract cases</name>
    <description>Check that the cases of the contract cases aspect cover the state space that is allowed by the precondition aspect.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_loop_invariant_init</key>
    <name>loop invariant in first iteration</name>
    <description>Check that the loop invariant evaluates to True on the first iteration of the loop.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_loop_invariant_preserv</key>
    <name>loop invariant after first iteration</name>
    <description>Check that the loop invariant evaluates to True at each further iteration of the loop.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_loop_variant</key>
    <name>loop variant</name>
    <description>Check that the given loop variant decreases/increases as specified during each iteration of the loop. This implies termination of the loop.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_assert</key>
    <name>assertion</name>
    <description>Check that the given assertion evaluates to True.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_raise</key>
    <name>raised exception</name>
    <description>Check that the raise statement can never be reached.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>assertions</tag>
  </rule>
  <rule>
    <key>vc_weaker_pre</key>
    <name>precondition weaker than class-wide precondition</name>
    <description>Check that the precondition aspect of the subprogram is weaker than its class-wide precondition.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>liskov-substitution-principle</tag>
  </rule>
  <rule>
    <key>vc_trivial_weaker_pre</key>
    <name>precondition not True while class-wide precondition is True</name>
    <description>Check that the precondition aspect of the subprogram is True if its class-wide precondition is True.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>liskov-substitution-principle</tag>
  </rule>
  <rule>
    <key>vc_stronger_post</key>
    <name>postcondition stronger than class-wide postcondition</name>
    <description>Check that the postcondition aspect of the subprogram is stronger than its class-wide postcondition.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>liskov-substitution-principle</tag>
  </rule>
  <rule>
    <key>vc_weaker_classwide_pre</key>
    <name>class-wide precondition weaker than overridden one</name>
    <description>Check that the class-wide precondition aspect of the subprogram is weaker than its overridden class-wide precondition.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>liskov-substitution-principle</tag>
  </rule>
  <rule>
    <key>vc_stronger_classwide_post</key>
    <name>class-wide postcondition stronger than overridden one</name>
    <description>Check that the class-wide postcondition aspect of the subprogram is stronger than its overridden class-wide postcondition.</description>
    <type>BUG</type>
    <tag>spark2014</tag>
    <tag>liskov-substitution-principle</tag>
  </rule>
</rules>
