.. include:: ../defines.hrst

Integrating |GNATdashboard| into your workflow
==============================================

|GNATdashboard| provides an integration with the |SonarSource|
software. |SonarQube| is an open platform to manage code quality. It is
extensible with plug-ins to add support for new languages and rules.

The |SonarAdaPlugin| provided with |GNATdashboard| packages supports
|SonarQube| platform from the LTS (long-term support) version (currently
|SonarQubeLTSVersion|) to the latest stable (currently
|SonarQubeStableVersion|).

How |GNAThub| integrates with |SonarQube|
-----------------------------------------

Sonar Ada Plugin
^^^^^^^^^^^^^^^^

|SonarRunner| requires a |SonarQube| Ada plug-in to work on Ada sources.
|SonarAdaPlugin| is provided to this effect and is part of the |GNATdashboard|
package. It is configured to read the |SQLite| database populated by |GNAThub|
and its plug-ins (it reads its configuration in :file:`sonar-project.properties`
generated by |GNAThub| :program:`sonar-config` plug-in).

To use it in the context of |GNATdashboard|, first deploy |SonarAdaPlugin| into
your |SonarQube| instance (please refer to |SonarQube| manual for plug-ins
installation).

Sonar Runner
^^^^^^^^^^^^

|GNAThub| execution (see :ref:`getting-started`) generates one |SonarRunner|
configuration file :file:`sonar-project.properties` describing the project being
analyzed (project name, project key, location of the :file:`gnathub.db` file,
...). This is fully generated by the :program:`sonar-config` plug-in of
|GNAThub| and is expected to be used *as-is* by the |SonarAdaPlugin| part of the
|GNATdashboard| product.

|SonarRunner| reads its settings from two different files:

* the system-wide :file:`$SONAR_RUNNER_HOME/conf/sonar-runner.properties`
* the project-specific :file:`sonar-project.properties` file provided through the
  :option:`-Dproject.settings` command line argument of |SonarRunner|

See `Installing and Configuring SonarQube Runner <http://bit.ly/1IpRwK4>`_
and `Analyzing with SonarQube Runner <http://bit.ly/1FNkKfD>`_ for more
information on |SonarRunner|.

By default, |GNAThub| will create the |SonarRunner| configuration file, and
launch the |SonarRunner| itself.

This execution is handled by the :program:`sonar-runner`
plug-in of |GNAThub|. This is always scheduled as the last |GNAThub| plugin:
this ensures that the output of all other tools is available in
the |GNAThub| database and that :file:`sonar-project.properties` has
been generated prior to launching the |SonarRunner|.

.. note::

    |GNAThub| expects :program:`sonar-runner` or :program:`sonar-runner.bat` to
    be available on the :envvar:`$PATH`.

|GNATdashboard| without |SonarQube|
-----------------------------------

|SonarQube| is only used to display results from various analysis. It is
therefore not mandatory to display the analysis: for instance, you can choose
not to use the |SonarQube| integration but use custom scripting to extract
the analysis results stored in the |GNAThub| database.

To disable the :program:`sonar-config` and :program:`sonar-runner` plug-ins,
use the :command:`Plugins_Off` project attribute
(see :ref:`project-attr-plugins-off`).

Incremental analysis
--------------------

|GNAThub| can be configured to run one plug-in at a time and thus provides
incremental execution of each plug-in (allowing for finer grain control and
better integration in existing project and code base).

Use :ref:`gnathub-switch-incremental` to enable incremental mode::

  $ for plugin in gnatcheck gnatmetric codepeer; do
  >   gnathub --incremental --plugins $plugin -P project.gpr
  > done

  $ gnathub --incremental --plugins sonarconfig -P project.gpr
  $ gnathub --incremental --plugins sonarrunner -P project.gpr

If you do not wish to use the |SonarQube| integration, you can
simply omit the last two |GNAThub| executions and use the
:ref:`gnathub-switch-exec` switch for custom database processing::

  $ gnathub --exec my-results-collector.py -P project.gpr
