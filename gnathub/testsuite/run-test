#! /usr/bin/env python

"""Run a testcase from the GNATdashboard testsuite.

Usage: run-test [options] testcase-directory
"""

import os
import re
import sys

from gnatpython.env import Env
from gnatpython.fileutils import split_file
from gnatpython.main import Main
from gnatpython.testdriver import TestRunner, add_run_test_options

from support.encoding import TestEncoder


class GNAThubTestRunner(TestRunner):

    """Test runner for a GNAThub test."""

    UNITTEST_PATTERN = 'test*.py'
    DEFAULT, UNITTEST = range(2)

    def __init__(self, test, discs, result_dir, temp_dir=Env().tmp_dir,
                 enable_cleanup=True, restricted_discs=None, test_args=None,
                 failed_only=False, default_timeout=780, use_basename=True):

        TestRunner.__init__(self, test, discs, result_dir, temp_dir,
                            enable_cleanup, restricted_discs, test_args,
                            failed_only, default_timeout, use_basename)

        # Activate tests duration monitoring
        self.opt_results['TIMING'] = 0

        # Decode the test name
        self.test = TestEncoder.decode(self.test)

        # Guess the kind of test
        if os.path.isfile(os.path.join(self.test, 'test.sh')):
            self.kind = GNAThubTestRunner.DEFAULT
            self.opt_results['CMD'] = 'test.sh'
        else:
            self.kind = GNAThubTestRunner.UNITTEST
            self.opt_results['CMD'] = sys.executable

    def adjust_to_context(self):
        super(GNAThubTestRunner, self).adjust_to_context()
        if self.kind == GNAThubTestRunner.UNITTEST:
            # Reset initial test status
            self.result = {'result': 'UNKNOWN', 'msg': '', 'is_failure': True}

    def compute_cmd_line_cmd(self, filesize_limit):
        if self.kind != GNAThubTestRunner.UNITTEST:
            super(GNAThubTestRunner, self).compute_cmd_line_cmd(filesize_limit)
        else:
            self.cmd_line = [sys.executable, '-m', 'unittest', 'discover',
                             '-p', GNAThubTestRunner.UNITTEST_PATTERN]

    @staticmethod
    def parse_unittest_output(output):
        summary = output[0]

        if output[1] not in ('-' * 70, '=' * 70):
            return {
                'result': 'CRASH',
                'is_failure': True,
                'msg': 'failed to parse test results'
            }

        if re.match('^\.*$', summary):
            return {'result': 'OK', 'is_failure': False, 'msg': ''}

        return {
            'msg': '%d assertions raised' % len(summary.replace('.', '')),
            'result': 'DIFF', 'is_failure': True
        }

    def analyze(self, ignore_white_chars=True):
        if self.kind != GNAThubTestRunner.UNITTEST:
            super(GNAThubTestRunner, self).analyze(ignore_white_chars)
            return

        output = split_file(self.output, ignore_errors=True)
        self.result = GNAThubTestRunner.parse_unittest_output(output)

        if self.result['result'] == 'DIFF':
            with open(self.output, 'w') as fdout:
                fdout.write('\n'.join([self.result['msg']] + output) + '\n')

        xfail = self.opt_results['XFAIL']

        if not isinstance(xfail, bool) and xfail:
            if self.result['result'] in ('DIFF', 'CRASH'):
                # Override the result file (remove visual clutter)
                open(self.output, 'w').close()
                self.result.update({'result': 'XFAIL', 'msg': xfail})

            elif self.result['result'] == 'OK':
                self.result.update({'result': 'UOK', 'msg': xfail})


def run_single_testcase():
    """Run a single testcase."""

    driver = Main()
    add_run_test_options(driver)

    driver.parse_args()

    if not driver.args:
        sys.exit('error: at least 1 argument expected.\n'
                 'Try `%s --help`' % os.path.basename(__file__))

    if driver.options.restricted_discs is not None:
        driver.options.restricted_discs = \
            driver.options.restricted_discs.split(',')

    platform_qualifier = Env().build.os.name
    if driver.options.discs is None:
        driver_options_discs = platform_qualifier
    else:
        driver_options_discs = ','.join(
            [driver.options.discs, platform_qualifier])

    runner = GNAThubTestRunner(
        driver.args[0],
        driver_options_discs,
        driver.options.output_dir,
        driver.options.tmp,
        driver.options.enable_cleanup,
        driver.options.restricted_discs,
        len(driver.args) > 1 and driver.args[1:] or None,
        driver.options.failed_only)
    runner.execute()


if __name__ == '__main__':
    try:
        run_single_testcase()
    except KeyboardInterrupt:
        sys.exit('Interrupted.')
    except Exception as why:
        sys.exit('Unexpected exception: %s' % why)
