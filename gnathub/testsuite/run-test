#! /usr/bin/env python

"""Run a testcase from the GNATdashboard testsuite

Usage: run-test [options] testcase-directory
"""

# pylint: disable=C0103
# Disable "Invalid module name" (this is a script, not a module)

import os
import sys

from gnatpython.env import Env
from gnatpython.main import Main
from gnatpython.testdriver import TestRunner, add_run_test_options

from support import TestEncoder


# Base directory for the testsuite
BASEDIR = os.path.dirname(os.path.realpath(__file__))


class GNAThubTestRunner(TestRunner):
    """Test runner for a GNAThub test."""

    # pylint: disable=too-many-arguments
    def __init__(self, test, discs, result_dir, temp_dir=Env().tmp_dir,
                 enable_cleanup=True, restricted_discs=None, test_args=None,
                 failed_only=False, default_timeout=780, use_basename=True):

        TestRunner.__init__(self, test, discs, result_dir, temp_dir,
                            enable_cleanup, restricted_discs, test_args,
                            failed_only, default_timeout, use_basename)

        # Activate tests duration monitoring
        self.opt_results['TIMING'] = 0
        self.opt_results['CMD'] = 'test.sh'

        # Decode the test name
        self.test = TestEncoder.decode(self.test)


def run_single_testcase():
    """Run a single testcase."""

    Env().add_path(os.path.normpath(
        os.path.join(BASEDIR, '..', 'build', 'bin')))

    driver = Main()
    add_run_test_options(driver)

    driver.parse_args()

    if not driver.args:
        sys.exit('error: at least 1 argument expected.\n'
                 'Try `%s --help`' % os.path.basename(__file__))

    if driver.options.restricted_discs is not None:
        driver.options.restricted_discs = \
            driver.options.restricted_discs.split(',')

    runner = GNAThubTestRunner(
        driver.args[0],
        driver.options.discs,
        driver.options.output_dir,
        driver.options.tmp,
        driver.options.enable_cleanup,
        driver.options.restricted_discs,
        len(driver.args) > 1 and driver.args[1:] or None,
        driver.options.failed_only)

    runner.execute()


if __name__ == '__main__':
    try:
        run_single_testcase()
    except KeyboardInterrupt:
        sys.exit('Interrupted.')
    except Exception as why:
        sys.exit('Unexpected exception: %s' % why)
