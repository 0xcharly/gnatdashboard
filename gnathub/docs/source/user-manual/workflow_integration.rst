.. include:: ../defines.hrst

Integrating |GNATdashboard| into your workflow
==============================================

|GNATdashboard| provides out-of-the-box integration with the |SonarSource|
software. |SonarQube| is an open platform to manage code quality. It is
extensible with plug-ins to add support for new languages and rules.

The |SonarAdaPlugin| provided with |GNATdashboard| packages currently only
support |SonarQube| LTS (long-term support) version, that is *3.7.4*. Plans in
the future are to support both LTS and latest stable version (currently *4.2*).

How |GNAThub| integrates with |SonarQube|
-----------------------------------------

Sonar Ada Plugin
^^^^^^^^^^^^^^^^

|SonarRunner| requires a |SonarQube| Ada plug-in to work on Ada sources.
|SonarAdaPlugin| is provided to this effect and is part of the |GNATdashboard|
package. It is configured to read the |SQLite| database populated by |GNAThub|
and its plug-ins (it reads its configuration in :file:`sonar-runner.properties`
generated by |GNAThub| :program:`sonar-config` plug-in).

To use it in the context of |GNATdashboard|, first deploy |SonarAdaPlugin| into
your |SonarQube| instance (please refer to |SonarQube| manual for plug-ins
installation).

Sonar Runner
^^^^^^^^^^^^

|GNAThub| execution (see :ref:`getting-started`) generates one |SonarRunner|
configuration file :file:`sonar-runner.properties` describing the project being
analyzed (project name, project key, location of the :file:`gnathub.db` file,
...). This is fully generated by the :program:`sonar-config` plug-in of
|GNAThub| and is expected to be used *as-is* by the |SonarAdaPlugin| part of the
|GNATdashboard| product.

|SonarRunner| reads its settings from two different files:

* the system-wide :file:`$SONAR_RUNNER_HOME/conf/sonar-runner.properties`
* the project-specific :file:`sonar-runner.properties` file provided through the
  :option:`-Dproject.settings` command line argument of |SonarRunner|

See `Installing and Configuring SonarQube Runner <http://docs.codehaus.org/display/SONAR/Installing+and+Configuring+SonarQube+Runner>`_
and `Analyzing with SonarQube Runner <http://docs.codehaus.org/display/SONAR/Analyzing+with+SonarQube+Runner>`_
for more information on |SonarRunner|.

|GNAThub| will also attempt to run |SonarRunner| using the configuration
previously generated. This execution is handled by the :program:`sonar-runner`
plug-in of |GNAThub|. This plug-in is currently always scheduled last by
|GNAThub| to ensure that each plug-in completes, storing the result analysis of
each tool in |GNAThub| database and that :file:`sonar-runner.properties` has
been generated prior to |SonarRunner| execution.

.. note::

    |GNAThub| expects :program:`sonar-runner` or :program:`sonar-runner.bat` to
    be available. You must set your :envvar:`$PATH` accordingly prior to
    execution.

|GNATdashboard| without |SonarQube|
-----------------------------------

|SonarQube| is only used to display results from various analysis. It is
therefor not mandatory to run those analysis. One can choose to ignore
|SonarQube| integration and use custom scripting to extract analysis results
stored in |GNAThub| database, and process them with an other external or custom
code quality management platform.

To disable both :program:`sonar-config` and :program:`sonar-runner` plug-ins of
|GNAThub|, one can use the :command:`Plugins_Off` project attribute (see
:ref:`project-attr-plugins-off`).

Incremental analysis
--------------------

|GNAThub| can be configured to run one plug-in at a time and thus provides
incremental execution of each plug-in (allowing for finer grain control and
better integration in existing project and code base).

Use :ref:`gnathub-switch-incremental` to enable incremental mode::

  $ for plugin in gnatcheck gnatmetric codepeer; do
  >   gnathub --incremental --plugins $plugin -P project.gpr
  > done

  $ gnathub --incremental --plugins sonarconfig -P project.gpr
  $ gnathub --incremental --plugins sonarrunner -P project.gpr

Integrators not willing to take advantage of the |SonarQube| integration can
simply omit the last two |GNAThub| executions and use the
:ref:`gnathub-switch-exec` switch for custom database processing::

  $ gnathub --exec my-results-collector.py -P project.gpr
