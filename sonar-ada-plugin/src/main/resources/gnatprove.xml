<?xml version='1.0' encoding='UTF-8'?>
<rules>
    <rule>
        <key>division_check</key>
        <name>division check</name>
        <description>Check that the second operand of the division, mod or rem operation is different from zero.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>index_check</key>
        <name>index check</name>
        <description>Check that the given index is within the bounds of the array.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>overflow_check</key>
        <name>overflow check</name>
        <description>Check that the result of the given arithmetic operation is within the bounds of the base type.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>range_check</key>
        <name>range check</name>
        <description>Check that the given value is within the bounds of the expected scalar subtype.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>length_check</key>
        <name>length check</name>
        <description>Check that the given array is of the length of the expected array subtype.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>discriminant_check</key>
        <name>discriminant check</name>
        <description>Check that the discriminant of the given discriminant record has the expected value. For variant records, this can happen for a simple access to a record field. But there are other cases where a fixed value of the discriminant is required.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>precondition</key>
        <name>precondition</name>
        <description>Check that the precondition aspect of the given call evaluates to True.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>postcondition</key>
        <name>postcondition</name>
        <description>Check that the postcondition aspect of the subprogram evaluates to True.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>contract_case</key>
        <name>contract case</name>
        <description>Check that all cases of the contract case evaluate to true at the end of the subprogram.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>disjoint_contract_cases</key>
        <name>disjoint contract cases</name>
        <description>Check that the cases of the contract cases aspect are all mutually disjoint.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>complete_contract_cases</key>
        <name>complete contract cases</name>
        <description>Check that the cases of the contract cases aspect cover the state space that is allowed by the precondition aspect.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>loop_invariant_initialization</key>
        <name>loop invariant initialization</name>
        <description>Check that the loop invariant evaluates to True on the first iteration of the loop.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>loop_invariant_preservation</key>
        <name>loop invariant preservation</name>
        <description>Check that the loop invariant evaluates to True at each further iteration of the loop.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>loop_variant</key>
        <name>loop variant</name>
        <description>Check that the given loop variant decreases/increases as specified during each iteration of the loop. This implies termination of the loop.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>assertion</key>
        <name>assertion</name>
        <description>Check that the given assertion evaluates to True.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>depends_missing</key>
        <name>depends missing</name>
        <description>A dependency is missing from the dependency relation.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>depends_missing_clause</key>
        <name>depends missing clause</name>
        <description>An out parameter or global is missing from the dependency relation.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>depends_null</key>
        <name>depends null</name>
        <description>A variable is missing from the null dependency.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>depends_wrong</key>
        <name>depends wrong</name>
        <description>A stated dependency is not fulfilled.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>illegal_update</key>
        <name>illegal update</name>
        <description>Flow analysis has detected an update of an in mode global.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>ineffective</key>
        <name>ineffective</name>
        <description>Flow analysis has detected an ineffective statement, such as an unused assignment.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>unused_initial_value</key>
        <name>unused initial value</name>
        <description>An in or in out parameter or global has been found which does not have any effect on any out or in out parameter or global.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>stable</key>
        <name>stable</name>
        <description>A questionable loop construct where a variable is assigned the same value on each loop iteration.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>uninitialized</key>
        <name>uninitialized</name>
        <description>Flow analysis has detected the use of an uninitialized variable.</description>
        <tag>gnatprove</tag>
    </rule>
    <rule>
        <key>unused</key>
        <name>unused</name>
        <description>A global or locally declared variable is never used.</description>
        <tag>gnatprove</tag>
    </rule>
</rules>
