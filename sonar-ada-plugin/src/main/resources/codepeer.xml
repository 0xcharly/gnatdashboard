<?xml version="1.0" ?>
<rules>
  <!--#### Codepeer rule repository generated from html doc page: messages_and_annotations ####-->
  <rule>
    <key>
      array index check - INFO
    </key>
    <configkey>
      array index check - INFO
    </configkey>
    <name>
      array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
  </rule>
  <rule>
    <key>
      array index check - MAJOR
    </key>
    <configkey>
      array index check - MAJOR
    </configkey>
    <name>
      array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      array index check - CRITICAL
    </key>
    <configkey>
      array index check - CRITICAL
    </configkey>
    <name>
      array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      array index check - MINOR
    </key>
    <configkey>
      array index check - MINOR
    </configkey>
    <name>
      array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      divide by zero - INFO
    </key>
    <configkey>
      divide by zero - INFO
    </configkey>
    <name>
      divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      divide by zero - MAJOR
    </key>
    <configkey>
      divide by zero - MAJOR
    </configkey>
    <name>
      divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      divide by zero - CRITICAL
    </key>
    <configkey>
      divide by zero - CRITICAL
    </configkey>
    <name>
      divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      divide by zero - MINOR
    </key>
    <configkey>
      divide by zero - MINOR
    </configkey>
    <name>
      divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      tag check - INFO
    </key>
    <configkey>
      tag check - INFO
    </configkey>
    <name>
      tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      tag check - MAJOR
    </key>
    <configkey>
      tag check - MAJOR
    </configkey>
    <name>
      tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      tag check - CRITICAL
    </key>
    <configkey>
      tag check - CRITICAL
    </configkey>
    <name>
      tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      tag check - MINOR
    </key>
    <configkey>
      tag check - MINOR
    </configkey>
    <name>
      tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      discriminant check - INFO
    </key>
    <configkey>
      discriminant check - INFO
    </configkey>
    <name>
      discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      discriminant check - MAJOR
    </key>
    <configkey>
      discriminant check - MAJOR
    </configkey>
    <name>
      discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      discriminant check - CRITICAL
    </key>
    <configkey>
      discriminant check - CRITICAL
    </configkey>
    <name>
      discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      discriminant check - MINOR
    </key>
    <configkey>
      discriminant check - MINOR
    </configkey>
    <name>
      discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      access check - INFO
    </key>
    <configkey>
      access check - INFO
    </configkey>
    <name>
      access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      access check - MAJOR
    </key>
    <configkey>
      access check - MAJOR
    </configkey>
    <name>
      access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      access check - CRITICAL
    </key>
    <configkey>
      access check - CRITICAL
    </configkey>
    <name>
      access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      access check - MINOR
    </key>
    <configkey>
      access check - MINOR
    </configkey>
    <name>
      access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      range check - INFO
    </key>
    <configkey>
      range check - INFO
    </configkey>
    <name>
      range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      range check - MAJOR
    </key>
    <configkey>
      range check - MAJOR
    </configkey>
    <name>
      range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      range check - CRITICAL
    </key>
    <configkey>
      range check - CRITICAL
    </configkey>
    <name>
      range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      range check - MINOR
    </key>
    <configkey>
      range check - MINOR
    </configkey>
    <name>
      range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      overflow check - INFO
    </key>
    <configkey>
      overflow check - INFO
    </configkey>
    <name>
      overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      overflow check - MAJOR
    </key>
    <configkey>
      overflow check - MAJOR
    </configkey>
    <name>
      overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      overflow check - CRITICAL
    </key>
    <configkey>
      overflow check - CRITICAL
    </configkey>
    <name>
      overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      overflow check - MINOR
    </key>
    <configkey>
      overflow check - MINOR
    </configkey>
    <name>
      overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      precondition - INFO
    </key>
    <configkey>
      precondition - INFO
    </configkey>
    <name>
      precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      precondition - MAJOR
    </key>
    <configkey>
      precondition - MAJOR
    </configkey>
    <name>
      precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      precondition - CRITICAL
    </key>
    <configkey>
      precondition - CRITICAL
    </configkey>
    <name>
      precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      precondition - MINOR
    </key>
    <configkey>
      precondition - MINOR
    </configkey>
    <name>
      precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      assertion - INFO
    </key>
    <configkey>
      assertion - INFO
    </configkey>
    <name>
      assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      assertion - MAJOR
    </key>
    <configkey>
      assertion - MAJOR
    </configkey>
    <name>
      assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      assertion - CRITICAL
    </key>
    <configkey>
      assertion - CRITICAL
    </configkey>
    <name>
      assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      assertion - MINOR
    </key>
    <configkey>
      assertion - MINOR
    </configkey>
    <name>
      assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      conditional check - INFO
    </key>
    <configkey>
      conditional check - INFO
    </configkey>
    <name>
      conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      conditional check - MAJOR
    </key>
    <configkey>
      conditional check - MAJOR
    </configkey>
    <name>
      conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      conditional check - CRITICAL
    </key>
    <configkey>
      conditional check - CRITICAL
    </configkey>
    <name>
      conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      conditional check - MINOR
    </key>
    <configkey>
      conditional check - MINOR
    </configkey>
    <name>
      conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      raise exception - INFO
    </key>
    <configkey>
      raise exception - INFO
    </configkey>
    <name>
      raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      raise exception - MAJOR
    </key>
    <configkey>
      raise exception - MAJOR
    </configkey>
    <name>
      raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      raise exception - CRITICAL
    </key>
    <configkey>
      raise exception - CRITICAL
    </configkey>
    <name>
      raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      raise exception - MINOR
    </key>
    <configkey>
      raise exception - MINOR
    </configkey>
    <name>
      raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      postcondition - INFO
    </key>
    <configkey>
      postcondition - INFO
    </configkey>
    <name>
      postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      postcondition - MAJOR
    </key>
    <configkey>
      postcondition - MAJOR
    </configkey>
    <name>
      postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      postcondition - CRITICAL
    </key>
    <configkey>
      postcondition - CRITICAL
    </configkey>
    <name>
      postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      postcondition - MINOR
    </key>
    <configkey>
      postcondition - MINOR
    </configkey>
    <name>
      postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      validity check - INFO
    </key>
    <configkey>
      validity check - INFO
    </configkey>
    <name>
      validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      validity check - MAJOR
    </key>
    <configkey>
      validity check - MAJOR
    </configkey>
    <name>
      validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      validity check - CRITICAL
    </key>
    <configkey>
      validity check - CRITICAL
    </configkey>
    <name>
      validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      validity check - MINOR
    </key>
    <configkey>
      validity check - MINOR
    </configkey>
    <name>
      validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      dead code - INFO
    </key>
    <configkey>
      dead code - INFO
    </configkey>
    <name>
      dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      dead code - MAJOR
    </key>
    <configkey>
      dead code - MAJOR
    </configkey>
    <name>
      dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      dead code - CRITICAL
    </key>
    <configkey>
      dead code - CRITICAL
    </configkey>
    <name>
      dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      dead code - MINOR
    </key>
    <configkey>
      dead code - MINOR
    </configkey>
    <name>
      dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      test predetermined - INFO
    </key>
    <configkey>
      test predetermined - INFO
    </configkey>
    <name>
      test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      test predetermined - MAJOR
    </key>
    <configkey>
      test predetermined - MAJOR
    </configkey>
    <name>
      test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      test predetermined - CRITICAL
    </key>
    <configkey>
      test predetermined - CRITICAL
    </configkey>
    <name>
      test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      test predetermined - MINOR
    </key>
    <configkey>
      test predetermined - MINOR
    </configkey>
    <name>
      test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      test always true - INFO
    </key>
    <configkey>
      test always true - INFO
    </configkey>
    <name>
      test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      test always true - MAJOR
    </key>
    <configkey>
      test always true - MAJOR
    </configkey>
    <name>
      test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      test always true - CRITICAL
    </key>
    <configkey>
      test always true - CRITICAL
    </configkey>
    <name>
      test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      test always true - MINOR
    </key>
    <configkey>
      test always true - MINOR
    </configkey>
    <name>
      test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      test always false - INFO
    </key>
    <configkey>
      test always false - INFO
    </configkey>
    <name>
      test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      test always false - MAJOR
    </key>
    <configkey>
      test always false - MAJOR
    </configkey>
    <name>
      test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      test always false - CRITICAL
    </key>
    <configkey>
      test always false - CRITICAL
    </configkey>
    <name>
      test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      test always false - MINOR
    </key>
    <configkey>
      test always false - MINOR
    </configkey>
    <name>
      test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      condition predetermined - INFO
    </key>
    <configkey>
      condition predetermined - INFO
    </configkey>
    <name>
      condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      condition predetermined - MAJOR
    </key>
    <configkey>
      condition predetermined - MAJOR
    </configkey>
    <name>
      condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      condition predetermined - CRITICAL
    </key>
    <configkey>
      condition predetermined - CRITICAL
    </configkey>
    <name>
      condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      condition predetermined - MINOR
    </key>
    <configkey>
      condition predetermined - MINOR
    </configkey>
    <name>
      condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      loop does not terminate - INFO
    </key>
    <configkey>
      loop does not terminate - INFO
    </configkey>
    <name>
      loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      loop does not terminate - MAJOR
    </key>
    <configkey>
      loop does not terminate - MAJOR
    </configkey>
    <name>
      loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      loop does not terminate - CRITICAL
    </key>
    <configkey>
      loop does not terminate - CRITICAL
    </configkey>
    <name>
      loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      loop does not terminate - MINOR
    </key>
    <configkey>
      loop does not terminate - MINOR
    </configkey>
    <name>
      loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment - INFO
    </key>
    <configkey>
      unused assignment - INFO
    </configkey>
    <name>
      unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment - MAJOR
    </key>
    <configkey>
      unused assignment - MAJOR
    </configkey>
    <name>
      unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment - CRITICAL
    </key>
    <configkey>
      unused assignment - CRITICAL
    </configkey>
    <name>
      unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment - MINOR
    </key>
    <configkey>
      unused assignment - MINOR
    </configkey>
    <name>
      unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment in callee - INFO
    </key>
    <configkey>
      unused assignment in callee - INFO
    </configkey>
    <name>
      unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment in callee - MAJOR
    </key>
    <configkey>
      unused assignment in callee - MAJOR
    </configkey>
    <name>
      unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment in callee - CRITICAL
    </key>
    <configkey>
      unused assignment in callee - CRITICAL
    </configkey>
    <name>
      unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      unused assignment in callee - MINOR
    </key>
    <configkey>
      unused assignment in callee - MINOR
    </configkey>
    <name>
      unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      useless self assignment - INFO
    </key>
    <configkey>
      useless self assignment - INFO
    </configkey>
    <name>
      useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      useless self assignment - MAJOR
    </key>
    <configkey>
      useless self assignment - MAJOR
    </configkey>
    <name>
      useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      useless self assignment - CRITICAL
    </key>
    <configkey>
      useless self assignment - CRITICAL
    </configkey>
    <name>
      useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      useless self assignment - MINOR
    </key>
    <configkey>
      useless self assignment - MINOR
    </configkey>
    <name>
      useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious precondition - INFO
    </key>
    <configkey>
      suspicious precondition - INFO
    </configkey>
    <name>
      suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      suspicious precondition - MAJOR
    </key>
    <configkey>
      suspicious precondition - MAJOR
    </configkey>
    <name>
      suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious precondition - CRITICAL
    </key>
    <configkey>
      suspicious precondition - CRITICAL
    </configkey>
    <name>
      suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      suspicious precondition - MINOR
    </key>
    <configkey>
      suspicious precondition - MINOR
    </configkey>
    <name>
      suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious input - INFO
    </key>
    <configkey>
      suspicious input - INFO
    </configkey>
    <name>
      suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      suspicious input - MAJOR
    </key>
    <configkey>
      suspicious input - MAJOR
    </configkey>
    <name>
      suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious input - CRITICAL
    </key>
    <configkey>
      suspicious input - CRITICAL
    </configkey>
    <name>
      suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      suspicious input - MINOR
    </key>
    <configkey>
      suspicious input - MINOR
    </configkey>
    <name>
      suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious constant operation - INFO
    </key>
    <configkey>
      suspicious constant operation - INFO
    </configkey>
    <name>
      suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      suspicious constant operation - MAJOR
    </key>
    <configkey>
      suspicious constant operation - MAJOR
    </configkey>
    <name>
      suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      suspicious constant operation - CRITICAL
    </key>
    <configkey>
      suspicious constant operation - CRITICAL
    </configkey>
    <name>
      suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      suspicious constant operation - MINOR
    </key>
    <configkey>
      suspicious constant operation - MINOR
    </configkey>
    <name>
      suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      subp never returns - INFO
    </key>
    <configkey>
      subp never returns - INFO
    </configkey>
    <name>
      subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      subp never returns - MAJOR
    </key>
    <configkey>
      subp never returns - MAJOR
    </configkey>
    <name>
      subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      subp never returns - CRITICAL
    </key>
    <configkey>
      subp never returns - CRITICAL
    </configkey>
    <name>
      subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      subp never returns - MINOR
    </key>
    <configkey>
      subp never returns - MINOR
    </configkey>
    <name>
      subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      subp fails for all possible inputs - INFO
    </key>
    <configkey>
      subp fails for all possible inputs - INFO
    </configkey>
    <name>
      subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      subp fails for all possible inputs - MAJOR
    </key>
    <configkey>
      subp fails for all possible inputs - MAJOR
    </configkey>
    <name>
      subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      subp fails for all possible inputs - CRITICAL
    </key>
    <configkey>
      subp fails for all possible inputs - CRITICAL
    </configkey>
    <name>
      subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      subp fails for all possible inputs - MINOR
    </key>
    <configkey>
      subp fails for all possible inputs - MINOR
    </configkey>
    <name>
      subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      unprotected access - INFO
    </key>
    <configkey>
      unprotected access - INFO
    </configkey>
    <name>
      unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      unprotected access - MAJOR
    </key>
    <configkey>
      unprotected access - MAJOR
    </configkey>
    <name>
      unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      unprotected access - CRITICAL
    </key>
    <configkey>
      unprotected access - CRITICAL
    </configkey>
    <name>
      unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      unprotected access - MINOR
    </key>
    <configkey>
      unprotected access - MINOR
    </configkey>
    <name>
      unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      unprotected shared access - INFO
    </key>
    <configkey>
      unprotected shared access - INFO
    </configkey>
    <name>
      unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      unprotected shared access - MAJOR
    </key>
    <configkey>
      unprotected shared access - MAJOR
    </configkey>
    <name>
      unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      unprotected shared access - CRITICAL
    </key>
    <configkey>
      unprotected shared access - CRITICAL
    </configkey>
    <name>
      unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      unprotected shared access - MINOR
    </key>
    <configkey>
      unprotected shared access - MINOR
    </configkey>
    <name>
      unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      mismatched protected access - INFO
    </key>
    <configkey>
      mismatched protected access - INFO
    </configkey>
    <name>
      mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      mismatched protected access - MAJOR
    </key>
    <configkey>
      mismatched protected access - MAJOR
    </configkey>
    <name>
      mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      mismatched protected access - CRITICAL
    </key>
    <configkey>
      mismatched protected access - CRITICAL
    </configkey>
    <name>
      mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      mismatched protected access - MINOR
    </key>
    <configkey>
      mismatched protected access - MINOR
    </configkey>
    <name>
      mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      call too complex; analysis skipped - INFO
    </key>
    <configkey>
      call too complex; analysis skipped - INFO
    </configkey>
    <name>
      call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      call too complex; analysis skipped - MAJOR
    </key>
    <configkey>
      call too complex; analysis skipped - MAJOR
    </configkey>
    <name>
      call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      call too complex; analysis skipped - CRITICAL
    </key>
    <configkey>
      call too complex; analysis skipped - CRITICAL
    </configkey>
    <name>
      call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      call too complex; analysis skipped - MINOR
    </key>
    <configkey>
      call too complex; analysis skipped - MINOR
    </configkey>
    <name>
      call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      subp not available; call not analyzed - INFO
    </key>
    <configkey>
      subp not available; call not analyzed - INFO
    </configkey>
    <name>
      subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      subp not available; call not analyzed - MAJOR
    </key>
    <configkey>
      subp not available; call not analyzed - MAJOR
    </configkey>
    <name>
      subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      subp not available; call not analyzed - CRITICAL
    </key>
    <configkey>
      subp not available; call not analyzed - CRITICAL
    </configkey>
    <name>
      subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      subp not available; call not analyzed - MINOR
    </key>
    <configkey>
      subp not available; call not analyzed - MINOR
    </configkey>
    <name>
      subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      High - INFO
    </key>
    <configkey>
      High - INFO
    </configkey>
    <name>
      High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      High - MAJOR
    </key>
    <configkey>
      High - MAJOR
    </configkey>
    <name>
      High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      High - CRITICAL
    </key>
    <configkey>
      High - CRITICAL
    </configkey>
    <name>
      High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      High - MINOR
    </key>
    <configkey>
      High - MINOR
    </configkey>
    <name>
      High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      Medium - INFO
    </key>
    <configkey>
      Medium - INFO
    </configkey>
    <name>
      Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      Medium - MAJOR
    </key>
    <configkey>
      Medium - MAJOR
    </configkey>
    <name>
      Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      Medium - CRITICAL
    </key>
    <configkey>
      Medium - CRITICAL
    </configkey>
    <name>
      Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      Medium - MINOR
    </key>
    <configkey>
      Medium - MINOR
    </configkey>
    <name>
      Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      Low - INFO
    </key>
    <configkey>
      Low - INFO
    </configkey>
    <name>
      Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      Low - MAJOR
    </key>
    <configkey>
      Low - MAJOR
    </configkey>
    <name>
      Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      Low - CRITICAL
    </key>
    <configkey>
      Low - CRITICAL
    </configkey>
    <name>
      Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      Low - MINOR
    </key>
    <configkey>
      Low - MINOR
    </configkey>
    <name>
      Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      Informational - INFO
    </key>
    <configkey>
      Informational - INFO
    </configkey>
    <name>
      Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      Informational - MAJOR
    </key>
    <configkey>
      Informational - MAJOR
    </configkey>
    <name>
      Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      Informational - CRITICAL
    </key>
    <configkey>
      Informational - CRITICAL
    </configkey>
    <name>
      Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      Informational - MINOR
    </key>
    <configkey>
      Informational - MINOR
    </configkey>
    <name>
      Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      Suppressed - INFO
    </key>
    <configkey>
      Suppressed - INFO
    </configkey>
    <name>
      Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      Suppressed - MAJOR
    </key>
    <configkey>
      Suppressed - MAJOR
    </configkey>
    <name>
      Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      Suppressed - CRITICAL
    </key>
    <configkey>
      Suppressed - CRITICAL
    </configkey>
    <name>
      Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      Suppressed - MINOR
    </key>
    <configkey>
      Suppressed - MINOR
    </configkey>
    <name>
      Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      current (now) - INFO
    </key>
    <configkey>
      current (now) - INFO
    </configkey>
    <name>
      current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      current (now) - MAJOR
    </key>
    <configkey>
      current (now) - MAJOR
    </configkey>
    <name>
      current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      current (now) - CRITICAL
    </key>
    <configkey>
      current (now) - CRITICAL
    </configkey>
    <name>
      current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      current (now) - MINOR
    </key>
    <configkey>
      current (now) - MINOR
    </configkey>
    <name>
      current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      new (added) - INFO
    </key>
    <configkey>
      new (added) - INFO
    </configkey>
    <name>
      new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      new (added) - MAJOR
    </key>
    <configkey>
      new (added) - MAJOR
    </configkey>
    <name>
      new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      new (added) - CRITICAL
    </key>
    <configkey>
      new (added) - CRITICAL
    </configkey>
    <name>
      new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      new (added) - MINOR
    </key>
    <configkey>
      new (added) - MINOR
    </configkey>
    <name>
      new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      dropped - INFO
    </key>
    <configkey>
      dropped - INFO
    </configkey>
    <name>
      dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      dropped - MAJOR
    </key>
    <configkey>
      dropped - MAJOR
    </configkey>
    <name>
      dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      dropped - CRITICAL
    </key>
    <configkey>
      dropped - CRITICAL
    </configkey>
    <name>
      dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      dropped - MINOR
    </key>
    <configkey>
      dropped - MINOR
    </configkey>
    <name>
      dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      base (baseline) - INFO
    </key>
    <configkey>
      base (baseline) - INFO
    </configkey>
    <name>
      base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      base (baseline) - MAJOR
    </key>
    <configkey>
      base (baseline) - MAJOR
    </configkey>
    <name>
      base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      base (baseline) - CRITICAL
    </key>
    <configkey>
      base (baseline) - CRITICAL
    </configkey>
    <name>
      base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      base (baseline) - MINOR
    </key>
    <configkey>
      base (baseline) - MINOR
    </configkey>
    <name>
      base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      deltas - INFO
    </key>
    <configkey>
      deltas - INFO
    </configkey>
    <name>
      deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      deltas - MAJOR
    </key>
    <configkey>
      deltas - MAJOR
    </configkey>
    <name>
      deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      deltas - CRITICAL
    </key>
    <configkey>
      deltas - CRITICAL
    </configkey>
    <name>
      deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      deltas - MINOR
    </key>
    <configkey>
      deltas - MINOR
    </configkey>
    <name>
      deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
</rules>
