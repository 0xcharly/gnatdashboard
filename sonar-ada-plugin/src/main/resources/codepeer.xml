<?xml version="1.0" ?>
<rules>
  <!--#### Codepeer rule repository generated from html doc page: messages_and_annotations ####-->
  <rule>
    <key>
      INFO__WARNING__array index check
    </key>
    <configkey>
      INFO__WARNING__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__array index check
    </key>
    <configkey>
      MAJOR__WARNING__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__array index check
    </key>
    <configkey>
      CRITICAL__WARNING__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__array index check
    </key>
    <configkey>
      MINOR__WARNING__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__array index check
    </key>
    <configkey>
      INFO__INFORMATIONAL__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__array index check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__array index check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__array index check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__array index check
    </key>
    <configkey>
      INFO__CHECK__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__array index check
    </key>
    <configkey>
      MAJOR__CHECK__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__array index check
    </key>
    <configkey>
      CRITICAL__CHECK__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__array index check
    </key>
    <configkey>
      MINOR__CHECK__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__array index check
    </key>
    <configkey>
      INFO__RACE CONDITION__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__array index check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__array index check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__array index check
    </key>
    <configkey>
      MINOR__RACE CONDITION__array index check
    </configkey>
    <name>
      codepeer - array index check
    </name>
    <description>
      Index value could be outside the array bounds (CWE 124, 125-127, 129, 130, 131, 132, 135, 193). This is also known as *buffer overflow*.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__divide by zero
    </key>
    <configkey>
      INFO__WARNING__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__divide by zero
    </key>
    <configkey>
      MAJOR__WARNING__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__divide by zero
    </key>
    <configkey>
      CRITICAL__WARNING__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__divide by zero
    </key>
    <configkey>
      MINOR__WARNING__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__divide by zero
    </key>
    <configkey>
      INFO__INFORMATIONAL__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__divide by zero
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__divide by zero
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__divide by zero
    </key>
    <configkey>
      MINOR__INFORMATIONAL__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__divide by zero
    </key>
    <configkey>
      INFO__CHECK__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__divide by zero
    </key>
    <configkey>
      MAJOR__CHECK__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__divide by zero
    </key>
    <configkey>
      CRITICAL__CHECK__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__divide by zero
    </key>
    <configkey>
      MINOR__CHECK__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__divide by zero
    </key>
    <configkey>
      INFO__RACE CONDITION__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__divide by zero
    </key>
    <configkey>
      MAJOR__RACE CONDITION__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__divide by zero
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__divide by zero
    </key>
    <configkey>
      MINOR__RACE CONDITION__divide by zero
    </configkey>
    <name>
      codepeer - divide by zero
    </name>
    <description>
      Second operand of a divide, mod or rem operation could be zero (CWE 189).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__tag check
    </key>
    <configkey>
      INFO__WARNING__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__tag check
    </key>
    <configkey>
      MAJOR__WARNING__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__tag check
    </key>
    <configkey>
      CRITICAL__WARNING__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__tag check
    </key>
    <configkey>
      MINOR__WARNING__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__tag check
    </key>
    <configkey>
      INFO__INFORMATIONAL__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__tag check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__tag check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__tag check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__tag check
    </key>
    <configkey>
      INFO__CHECK__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__tag check
    </key>
    <configkey>
      MAJOR__CHECK__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__tag check
    </key>
    <configkey>
      CRITICAL__CHECK__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__tag check
    </key>
    <configkey>
      MINOR__CHECK__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__tag check
    </key>
    <configkey>
      INFO__RACE CONDITION__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__tag check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__tag check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__tag check
    </key>
    <configkey>
      MINOR__RACE CONDITION__tag check
    </configkey>
    <name>
      codepeer - tag check
    </name>
    <description>
      A tag check (incorrect tag value on a tagged object) may fail.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__discriminant check
    </key>
    <configkey>
      INFO__WARNING__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__discriminant check
    </key>
    <configkey>
      MAJOR__WARNING__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__discriminant check
    </key>
    <configkey>
      CRITICAL__WARNING__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__discriminant check
    </key>
    <configkey>
      MINOR__WARNING__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__discriminant check
    </key>
    <configkey>
      INFO__INFORMATIONAL__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__discriminant check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__discriminant check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__discriminant check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__discriminant check
    </key>
    <configkey>
      INFO__CHECK__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__discriminant check
    </key>
    <configkey>
      MAJOR__CHECK__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__discriminant check
    </key>
    <configkey>
      CRITICAL__CHECK__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__discriminant check
    </key>
    <configkey>
      MINOR__CHECK__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__discriminant check
    </key>
    <configkey>
      INFO__RACE CONDITION__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__discriminant check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__discriminant check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__discriminant check
    </key>
    <configkey>
      MINOR__RACE CONDITION__discriminant check
    </configkey>
    <name>
      codepeer - discriminant check
    </name>
    <description>
      A field for the wrong variant/discriminant is accessed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__access check
    </key>
    <configkey>
      INFO__WARNING__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__access check
    </key>
    <configkey>
      MAJOR__WARNING__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__access check
    </key>
    <configkey>
      CRITICAL__WARNING__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__access check
    </key>
    <configkey>
      MINOR__WARNING__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__access check
    </key>
    <configkey>
      INFO__INFORMATIONAL__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__access check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__access check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__access check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__access check
    </key>
    <configkey>
      INFO__CHECK__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__access check
    </key>
    <configkey>
      MAJOR__CHECK__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__access check
    </key>
    <configkey>
      CRITICAL__CHECK__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__access check
    </key>
    <configkey>
      MINOR__CHECK__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__access check
    </key>
    <configkey>
      INFO__RACE CONDITION__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__access check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__access check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__access check
    </key>
    <configkey>
      MINOR__RACE CONDITION__access check
    </configkey>
    <name>
      codepeer - access check
    </name>
    <description>
      Attempting to dereference a reference that could be null (CWE 252-253, 476).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__range check
    </key>
    <configkey>
      INFO__WARNING__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__range check
    </key>
    <configkey>
      MAJOR__WARNING__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__range check
    </key>
    <configkey>
      CRITICAL__WARNING__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__range check
    </key>
    <configkey>
      MINOR__WARNING__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__range check
    </key>
    <configkey>
      INFO__INFORMATIONAL__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__range check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__range check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__range check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__range check
    </key>
    <configkey>
      INFO__CHECK__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__range check
    </key>
    <configkey>
      MAJOR__CHECK__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__range check
    </key>
    <configkey>
      CRITICAL__CHECK__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__range check
    </key>
    <configkey>
      MINOR__CHECK__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__range check
    </key>
    <configkey>
      INFO__RACE CONDITION__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__range check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__range check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__range check
    </key>
    <configkey>
      MINOR__RACE CONDITION__range check
    </configkey>
    <name>
      codepeer - range check
    </name>
    <description>
      A calculation may generate a value outside the bounds of an Ada type or subtype and generate an invalid value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__overflow check
    </key>
    <configkey>
      INFO__WARNING__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__overflow check
    </key>
    <configkey>
      MAJOR__WARNING__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__overflow check
    </key>
    <configkey>
      CRITICAL__WARNING__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__overflow check
    </key>
    <configkey>
      MINOR__WARNING__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__overflow check
    </key>
    <configkey>
      INFO__INFORMATIONAL__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__overflow check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__overflow check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__overflow check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__overflow check
    </key>
    <configkey>
      INFO__CHECK__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__overflow check
    </key>
    <configkey>
      MAJOR__CHECK__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__overflow check
    </key>
    <configkey>
      CRITICAL__CHECK__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__overflow check
    </key>
    <configkey>
      MINOR__CHECK__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__overflow check
    </key>
    <configkey>
      INFO__RACE CONDITION__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__overflow check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__overflow check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__overflow check
    </key>
    <configkey>
      MINOR__RACE CONDITION__overflow check
    </configkey>
    <name>
      codepeer - overflow check
    </name>
    <description>
      A calculation may overflow the bounds of a numeric type and wrap around. The likelihood this will affect operation of the program depends on how narrow is the range of the numeric value (CWE 128, 190-192, 197).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__precondition
    </key>
    <configkey>
      INFO__WARNING__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__precondition
    </key>
    <configkey>
      MAJOR__WARNING__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__precondition
    </key>
    <configkey>
      CRITICAL__WARNING__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__precondition
    </key>
    <configkey>
      MINOR__WARNING__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__precondition
    </key>
    <configkey>
      INFO__INFORMATIONAL__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__precondition
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__precondition
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__precondition
    </key>
    <configkey>
      MINOR__INFORMATIONAL__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__precondition
    </key>
    <configkey>
      INFO__CHECK__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__precondition
    </key>
    <configkey>
      MAJOR__CHECK__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__precondition
    </key>
    <configkey>
      CRITICAL__CHECK__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__precondition
    </key>
    <configkey>
      MINOR__CHECK__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__precondition
    </key>
    <configkey>
      INFO__RACE CONDITION__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__precondition
    </key>
    <configkey>
      MAJOR__RACE CONDITION__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__precondition
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__precondition
    </key>
    <configkey>
      MINOR__RACE CONDITION__precondition
    </configkey>
    <name>
      codepeer - precondition
    </name>
    <description>
      A subprogram call that might violate the subprogram's preconditions.  NOTE: in the details associated with the message, the precondition being checked is expressed in terms of the variables of the called subprogram, rather than the calling one. On the HTML output, you can click on the link provided to view the preconditions and local parameter names of the called subprogram, and then click the Back button (&quot;&lt;&lt;&quot;), before trying to understand in what way the caller might be violating the precondition. In GPS, you can use the `Goto body of xxx` capability instead.  A run-time check as listed above (e.g.  range check) may add a precondition on a subprogram, which is then checked at all call sites and will generate a precondition message in case a failure of this precondition may occur.  See :ref:`Description_of_Annotations` for more information on preconditions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__assertion
    </key>
    <configkey>
      INFO__WARNING__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__assertion
    </key>
    <configkey>
      MAJOR__WARNING__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__assertion
    </key>
    <configkey>
      CRITICAL__WARNING__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__assertion
    </key>
    <configkey>
      MINOR__WARNING__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__assertion
    </key>
    <configkey>
      INFO__INFORMATIONAL__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__assertion
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__assertion
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__assertion
    </key>
    <configkey>
      MINOR__INFORMATIONAL__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__assertion
    </key>
    <configkey>
      INFO__CHECK__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__assertion
    </key>
    <configkey>
      MAJOR__CHECK__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__assertion
    </key>
    <configkey>
      CRITICAL__CHECK__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__assertion
    </key>
    <configkey>
      MINOR__CHECK__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__assertion
    </key>
    <configkey>
      INFO__RACE CONDITION__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__assertion
    </key>
    <configkey>
      MAJOR__RACE CONDITION__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__assertion
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__assertion
    </key>
    <configkey>
      MINOR__RACE CONDITION__assertion
    </configkey>
    <name>
      codepeer - assertion
    </name>
    <description>
      A user assertion (using e.g. pragma Assert or precondition) could fail. The precondition may be written as a pragma Precondition, or as a Pre aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__conditional check
    </key>
    <configkey>
      INFO__WARNING__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__conditional check
    </key>
    <configkey>
      MAJOR__WARNING__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__conditional check
    </key>
    <configkey>
      CRITICAL__WARNING__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__conditional check
    </key>
    <configkey>
      MINOR__WARNING__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__conditional check
    </key>
    <configkey>
      INFO__INFORMATIONAL__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__conditional check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__conditional check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__conditional check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__conditional check
    </key>
    <configkey>
      INFO__CHECK__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__conditional check
    </key>
    <configkey>
      MAJOR__CHECK__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__conditional check
    </key>
    <configkey>
      CRITICAL__CHECK__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__conditional check
    </key>
    <configkey>
      MINOR__CHECK__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__conditional check
    </key>
    <configkey>
      INFO__RACE CONDITION__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__conditional check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__conditional check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__conditional check
    </key>
    <configkey>
      MINOR__RACE CONDITION__conditional check
    </configkey>
    <name>
      codepeer - conditional check
    </name>
    <description>
      An exception could be raised depending on the outcome of a conditional test in user code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__raise exception
    </key>
    <configkey>
      INFO__WARNING__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__raise exception
    </key>
    <configkey>
      MAJOR__WARNING__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__raise exception
    </key>
    <configkey>
      CRITICAL__WARNING__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__raise exception
    </key>
    <configkey>
      MINOR__WARNING__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__raise exception
    </key>
    <configkey>
      INFO__INFORMATIONAL__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__raise exception
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__raise exception
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__raise exception
    </key>
    <configkey>
      MINOR__INFORMATIONAL__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__raise exception
    </key>
    <configkey>
      INFO__CHECK__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__raise exception
    </key>
    <configkey>
      MAJOR__CHECK__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__raise exception
    </key>
    <configkey>
      CRITICAL__CHECK__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__raise exception
    </key>
    <configkey>
      MINOR__CHECK__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__raise exception
    </key>
    <configkey>
      INFO__RACE CONDITION__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__raise exception
    </key>
    <configkey>
      MAJOR__RACE CONDITION__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__raise exception
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__raise exception
    </key>
    <configkey>
      MINOR__RACE CONDITION__raise exception
    </configkey>
    <name>
      codepeer - raise exception
    </name>
    <description>
      An exception is being raised on a reachable path.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__postcondition
    </key>
    <configkey>
      INFO__WARNING__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__postcondition
    </key>
    <configkey>
      MAJOR__WARNING__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__postcondition
    </key>
    <configkey>
      CRITICAL__WARNING__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__postcondition
    </key>
    <configkey>
      MINOR__WARNING__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__postcondition
    </key>
    <configkey>
      INFO__INFORMATIONAL__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__postcondition
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__postcondition
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__postcondition
    </key>
    <configkey>
      MINOR__INFORMATIONAL__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__postcondition
    </key>
    <configkey>
      INFO__CHECK__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__postcondition
    </key>
    <configkey>
      MAJOR__CHECK__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__postcondition
    </key>
    <configkey>
      CRITICAL__CHECK__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__postcondition
    </key>
    <configkey>
      MINOR__CHECK__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__postcondition
    </key>
    <configkey>
      INFO__RACE CONDITION__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__postcondition
    </key>
    <configkey>
      MAJOR__RACE CONDITION__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__postcondition
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__postcondition
    </key>
    <configkey>
      MINOR__RACE CONDITION__postcondition
    </configkey>
    <name>
      codepeer - postcondition
    </name>
    <description>
      The subprogram's body may violate its specified postcondition. This specification may be written as a pragma Postcondition, or as a Post aspect in Ada 2012 syntax.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__validity check
    </key>
    <configkey>
      INFO__WARNING__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__validity check
    </key>
    <configkey>
      MAJOR__WARNING__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__validity check
    </key>
    <configkey>
      CRITICAL__WARNING__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__validity check
    </key>
    <configkey>
      MINOR__WARNING__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__validity check
    </key>
    <configkey>
      INFO__INFORMATIONAL__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__validity check
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__validity check
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__validity check
    </key>
    <configkey>
      MINOR__INFORMATIONAL__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__validity check
    </key>
    <configkey>
      INFO__CHECK__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__validity check
    </key>
    <configkey>
      MAJOR__CHECK__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__validity check
    </key>
    <configkey>
      CRITICAL__CHECK__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__validity check
    </key>
    <configkey>
      MINOR__CHECK__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__validity check
    </key>
    <configkey>
      INFO__RACE CONDITION__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__validity check
    </key>
    <configkey>
      MAJOR__RACE CONDITION__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__validity check
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__validity check
    </key>
    <configkey>
      MINOR__RACE CONDITION__validity check
    </configkey>
    <name>
      codepeer - validity check
    </name>
    <description>
      The code may be reading an uninitialized or invalid value (e.g. corrupted data) (CWE 232, 236, 475).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__dead code
    </key>
    <configkey>
      INFO__WARNING__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__dead code
    </key>
    <configkey>
      MAJOR__WARNING__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__dead code
    </key>
    <configkey>
      CRITICAL__WARNING__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__dead code
    </key>
    <configkey>
      MINOR__WARNING__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__dead code
    </key>
    <configkey>
      INFO__INFORMATIONAL__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__dead code
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__dead code
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__dead code
    </key>
    <configkey>
      MINOR__INFORMATIONAL__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__dead code
    </key>
    <configkey>
      INFO__CHECK__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__dead code
    </key>
    <configkey>
      MAJOR__CHECK__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__dead code
    </key>
    <configkey>
      CRITICAL__CHECK__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__dead code
    </key>
    <configkey>
      MINOR__CHECK__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__dead code
    </key>
    <configkey>
      INFO__RACE CONDITION__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__dead code
    </key>
    <configkey>
      MAJOR__RACE CONDITION__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__dead code
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__dead code
    </key>
    <configkey>
      MINOR__RACE CONDITION__dead code
    </configkey>
    <name>
      codepeer - dead code
    </name>
    <description>
      Indicates logical errors as the programmer assumed the unreachable code could be executed (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__test predetermined
    </key>
    <configkey>
      INFO__WARNING__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__test predetermined
    </key>
    <configkey>
      MAJOR__WARNING__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__test predetermined
    </key>
    <configkey>
      CRITICAL__WARNING__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__test predetermined
    </key>
    <configkey>
      MINOR__WARNING__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__test predetermined
    </key>
    <configkey>
      INFO__INFORMATIONAL__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__test predetermined
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__test predetermined
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__test predetermined
    </key>
    <configkey>
      MINOR__INFORMATIONAL__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__test predetermined
    </key>
    <configkey>
      INFO__CHECK__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__test predetermined
    </key>
    <configkey>
      MAJOR__CHECK__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__test predetermined
    </key>
    <configkey>
      CRITICAL__CHECK__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__test predetermined
    </key>
    <configkey>
      MINOR__CHECK__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__test predetermined
    </key>
    <configkey>
      INFO__RACE CONDITION__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__test predetermined
    </key>
    <configkey>
      MAJOR__RACE CONDITION__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__test predetermined
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__test predetermined
    </key>
    <configkey>
      MINOR__RACE CONDITION__test predetermined
    </configkey>
    <name>
      codepeer - test predetermined
    </name>
    <description>
      Indicates redundant conditionals, which could flag logical errors (CWE 561).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__test always true
    </key>
    <configkey>
      INFO__WARNING__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__test always true
    </key>
    <configkey>
      MAJOR__WARNING__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__test always true
    </key>
    <configkey>
      CRITICAL__WARNING__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__test always true
    </key>
    <configkey>
      MINOR__WARNING__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__test always true
    </key>
    <configkey>
      INFO__INFORMATIONAL__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__test always true
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__test always true
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__test always true
    </key>
    <configkey>
      MINOR__INFORMATIONAL__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__test always true
    </key>
    <configkey>
      INFO__CHECK__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__test always true
    </key>
    <configkey>
      MAJOR__CHECK__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__test always true
    </key>
    <configkey>
      CRITICAL__CHECK__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__test always true
    </key>
    <configkey>
      MINOR__CHECK__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__test always true
    </key>
    <configkey>
      INFO__RACE CONDITION__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__test always true
    </key>
    <configkey>
      MAJOR__RACE CONDITION__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__test always true
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__test always true
    </key>
    <configkey>
      MINOR__RACE CONDITION__test always true
    </configkey>
    <name>
      codepeer - test always true
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to true.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__test always false
    </key>
    <configkey>
      INFO__WARNING__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__test always false
    </key>
    <configkey>
      MAJOR__WARNING__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__test always false
    </key>
    <configkey>
      CRITICAL__WARNING__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__test always false
    </key>
    <configkey>
      MINOR__WARNING__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__test always false
    </key>
    <configkey>
      INFO__INFORMATIONAL__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__test always false
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__test always false
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__test always false
    </key>
    <configkey>
      MINOR__INFORMATIONAL__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__test always false
    </key>
    <configkey>
      INFO__CHECK__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__test always false
    </key>
    <configkey>
      MAJOR__CHECK__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__test always false
    </key>
    <configkey>
      CRITICAL__CHECK__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__test always false
    </key>
    <configkey>
      MINOR__CHECK__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__test always false
    </key>
    <configkey>
      INFO__RACE CONDITION__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__test always false
    </key>
    <configkey>
      MAJOR__RACE CONDITION__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__test always false
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__test always false
    </key>
    <configkey>
      MINOR__RACE CONDITION__test always false
    </configkey>
    <name>
      codepeer - test always false
    </name>
    <description>
      Same as above, with an additional indication that the test always evaluates to false.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__condition predetermined
    </key>
    <configkey>
      INFO__WARNING__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__condition predetermined
    </key>
    <configkey>
      MAJOR__WARNING__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__condition predetermined
    </key>
    <configkey>
      CRITICAL__WARNING__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__condition predetermined
    </key>
    <configkey>
      MINOR__WARNING__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__condition predetermined
    </key>
    <configkey>
      INFO__INFORMATIONAL__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__condition predetermined
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__condition predetermined
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__condition predetermined
    </key>
    <configkey>
      MINOR__INFORMATIONAL__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__condition predetermined
    </key>
    <configkey>
      INFO__CHECK__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__condition predetermined
    </key>
    <configkey>
      MAJOR__CHECK__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__condition predetermined
    </key>
    <configkey>
      CRITICAL__CHECK__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__condition predetermined
    </key>
    <configkey>
      MINOR__CHECK__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__condition predetermined
    </key>
    <configkey>
      INFO__RACE CONDITION__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__condition predetermined
    </key>
    <configkey>
      MAJOR__RACE CONDITION__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__condition predetermined
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__condition predetermined
    </key>
    <configkey>
      MINOR__RACE CONDITION__condition predetermined
    </configkey>
    <name>
      codepeer - condition predetermined
    </name>
    <description>
      Indicates redundant condition inside a conditional, like the left or right operand of a boolean operator which is always true or false
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__loop does not terminate
    </key>
    <configkey>
      INFO__WARNING__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__loop does not terminate
    </key>
    <configkey>
      MAJOR__WARNING__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__loop does not terminate
    </key>
    <configkey>
      CRITICAL__WARNING__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__loop does not terminate
    </key>
    <configkey>
      MINOR__WARNING__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__loop does not terminate
    </key>
    <configkey>
      INFO__INFORMATIONAL__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__loop does not terminate
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__loop does not terminate
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__loop does not terminate
    </key>
    <configkey>
      MINOR__INFORMATIONAL__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__loop does not terminate
    </key>
    <configkey>
      INFO__CHECK__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__loop does not terminate
    </key>
    <configkey>
      MAJOR__CHECK__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__loop does not terminate
    </key>
    <configkey>
      CRITICAL__CHECK__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__loop does not terminate
    </key>
    <configkey>
      MINOR__CHECK__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__loop does not terminate
    </key>
    <configkey>
      INFO__RACE CONDITION__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__loop does not terminate
    </key>
    <configkey>
      MAJOR__RACE CONDITION__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__loop does not terminate
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__loop does not terminate
    </key>
    <configkey>
      MINOR__RACE CONDITION__loop does not terminate
    </configkey>
    <name>
      codepeer - loop does not terminate
    </name>
    <description>
      Indicates loops that either run forever or fail to terminate normally.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__unused assignment
    </key>
    <configkey>
      INFO__WARNING__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__unused assignment
    </key>
    <configkey>
      MAJOR__WARNING__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__unused assignment
    </key>
    <configkey>
      CRITICAL__WARNING__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__unused assignment
    </key>
    <configkey>
      MINOR__WARNING__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__unused assignment
    </key>
    <configkey>
      INFO__INFORMATIONAL__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__unused assignment
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__unused assignment
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__unused assignment
    </key>
    <configkey>
      MINOR__INFORMATIONAL__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__unused assignment
    </key>
    <configkey>
      INFO__CHECK__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__unused assignment
    </key>
    <configkey>
      MAJOR__CHECK__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__unused assignment
    </key>
    <configkey>
      CRITICAL__CHECK__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__unused assignment
    </key>
    <configkey>
      MINOR__CHECK__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__unused assignment
    </key>
    <configkey>
      INFO__RACE CONDITION__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__unused assignment
    </key>
    <configkey>
      MAJOR__RACE CONDITION__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__unused assignment
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__unused assignment
    </key>
    <configkey>
      MINOR__RACE CONDITION__unused assignment
    </configkey>
    <name>
      codepeer - unused assignment
    </name>
    <description>
      Indicates redundant assignment. This may be an indication of unintentional loss of result or unexpected flow of control (CWE 563). Note that CodePeer recognizes special variable patterns as temporary variables that will be ignored by this check: *ignore*, *unuse*, *discard*, *dummy*, *tmp*, *temp*.  This can be tuned via the MessagePatterns.xml file if needed. An object marked as unreferenced via an Unreferenced pragma is similarly ignored (see the Implementation Defined Pragmas section of the Gnat Pro Reference Manual for information about this pragma).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__unused assignment in callee
    </key>
    <configkey>
      INFO__WARNING__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__unused assignment in callee
    </key>
    <configkey>
      MAJOR__WARNING__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__unused assignment in callee
    </key>
    <configkey>
      CRITICAL__WARNING__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__unused assignment in callee
    </key>
    <configkey>
      MINOR__WARNING__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__unused assignment in callee
    </key>
    <configkey>
      INFO__INFORMATIONAL__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__unused assignment in callee
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__unused assignment in callee
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__unused assignment in callee
    </key>
    <configkey>
      MINOR__INFORMATIONAL__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__unused assignment in callee
    </key>
    <configkey>
      INFO__CHECK__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__unused assignment in callee
    </key>
    <configkey>
      MAJOR__CHECK__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__unused assignment in callee
    </key>
    <configkey>
      CRITICAL__CHECK__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__unused assignment in callee
    </key>
    <configkey>
      MINOR__CHECK__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__unused assignment in callee
    </key>
    <configkey>
      INFO__RACE CONDITION__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__unused assignment in callee
    </key>
    <configkey>
      MAJOR__RACE CONDITION__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__unused assignment in callee
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__unused assignment in callee
    </key>
    <configkey>
      MINOR__RACE CONDITION__unused assignment in callee
    </configkey>
    <name>
      codepeer - unused assignment in callee
    </name>
    <description>
      Indicates that a function call updates an `out` (or `in out`) parameter or a global, and then the caller proceeds to ignore the new value, and immediately overwrites it, or exits the block without looking at it. In other words, if one were to manually inline the call, then it would be a normal `unused assignment` message.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__useless self assignment
    </key>
    <configkey>
      INFO__WARNING__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__useless self assignment
    </key>
    <configkey>
      MAJOR__WARNING__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__useless self assignment
    </key>
    <configkey>
      CRITICAL__WARNING__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__useless self assignment
    </key>
    <configkey>
      MINOR__WARNING__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__useless self assignment
    </key>
    <configkey>
      INFO__INFORMATIONAL__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__useless self assignment
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__useless self assignment
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__useless self assignment
    </key>
    <configkey>
      MINOR__INFORMATIONAL__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__useless self assignment
    </key>
    <configkey>
      INFO__CHECK__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__useless self assignment
    </key>
    <configkey>
      MAJOR__CHECK__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__useless self assignment
    </key>
    <configkey>
      CRITICAL__CHECK__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__useless self assignment
    </key>
    <configkey>
      MINOR__CHECK__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__useless self assignment
    </key>
    <configkey>
      INFO__RACE CONDITION__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__useless self assignment
    </key>
    <configkey>
      MAJOR__RACE CONDITION__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__useless self assignment
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__useless self assignment
    </key>
    <configkey>
      MINOR__RACE CONDITION__useless self assignment
    </configkey>
    <name>
      codepeer - useless self assignment
    </name>
    <description>
      Indicates when an assignment does not modify the value stored in the variable being assigned.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__suspicious precondition
    </key>
    <configkey>
      INFO__WARNING__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__suspicious precondition
    </key>
    <configkey>
      MAJOR__WARNING__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__suspicious precondition
    </key>
    <configkey>
      CRITICAL__WARNING__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__suspicious precondition
    </key>
    <configkey>
      MINOR__WARNING__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__suspicious precondition
    </key>
    <configkey>
      INFO__INFORMATIONAL__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__suspicious precondition
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__suspicious precondition
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__suspicious precondition
    </key>
    <configkey>
      MINOR__INFORMATIONAL__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__suspicious precondition
    </key>
    <configkey>
      INFO__CHECK__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__suspicious precondition
    </key>
    <configkey>
      MAJOR__CHECK__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__suspicious precondition
    </key>
    <configkey>
      CRITICAL__CHECK__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__suspicious precondition
    </key>
    <configkey>
      MINOR__CHECK__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__suspicious precondition
    </key>
    <configkey>
      INFO__RACE CONDITION__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__suspicious precondition
    </key>
    <configkey>
      MAJOR__RACE CONDITION__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__suspicious precondition
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__suspicious precondition
    </key>
    <configkey>
      MINOR__RACE CONDITION__suspicious precondition
    </configkey>
    <name>
      codepeer - suspicious precondition
    </name>
    <description>
      The precondition has a form that indicates there might be a problem with the algorithm. If the allowable value set of a given input expression is not contiguous, that is, there are certain values of the expression that might cause a run-time problem inside the subprogram in between values that are safe, then this might be an indication that certain cases are not being properly handled by the code. In other situations, this might simply reflect the inherent nature of the algorithm involved.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__suspicious input
    </key>
    <configkey>
      INFO__WARNING__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__suspicious input
    </key>
    <configkey>
      MAJOR__WARNING__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__suspicious input
    </key>
    <configkey>
      CRITICAL__WARNING__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__suspicious input
    </key>
    <configkey>
      MINOR__WARNING__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__suspicious input
    </key>
    <configkey>
      INFO__INFORMATIONAL__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__suspicious input
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__suspicious input
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__suspicious input
    </key>
    <configkey>
      MINOR__INFORMATIONAL__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__suspicious input
    </key>
    <configkey>
      INFO__CHECK__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__suspicious input
    </key>
    <configkey>
      MAJOR__CHECK__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__suspicious input
    </key>
    <configkey>
      CRITICAL__CHECK__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__suspicious input
    </key>
    <configkey>
      MINOR__CHECK__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__suspicious input
    </key>
    <configkey>
      INFO__RACE CONDITION__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__suspicious input
    </key>
    <configkey>
      MAJOR__RACE CONDITION__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__suspicious input
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__suspicious input
    </key>
    <configkey>
      MINOR__RACE CONDITION__suspicious input
    </configkey>
    <name>
      codepeer - suspicious input
    </name>
    <description>
      Inputs mention a value reachable through an out-parameter of the suprogram before this parameter is assigned. Although the value may sometimes be initialized as the Ada standard allows, it generally uncovers a bug where the subprogram reads an uninitialized value or a value that the programmer did not mean to pass to the subprogram as an input value.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__suspicious constant operation
    </key>
    <configkey>
      INFO__WARNING__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__suspicious constant operation
    </key>
    <configkey>
      MAJOR__WARNING__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__suspicious constant operation
    </key>
    <configkey>
      CRITICAL__WARNING__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__suspicious constant operation
    </key>
    <configkey>
      MINOR__WARNING__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__suspicious constant operation
    </key>
    <configkey>
      INFO__INFORMATIONAL__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__suspicious constant operation
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__suspicious constant operation
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__suspicious constant operation
    </key>
    <configkey>
      MINOR__INFORMATIONAL__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__suspicious constant operation
    </key>
    <configkey>
      INFO__CHECK__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__suspicious constant operation
    </key>
    <configkey>
      MAJOR__CHECK__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__suspicious constant operation
    </key>
    <configkey>
      CRITICAL__CHECK__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__suspicious constant operation
    </key>
    <configkey>
      MINOR__CHECK__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__suspicious constant operation
    </key>
    <configkey>
      INFO__RACE CONDITION__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__suspicious constant operation
    </key>
    <configkey>
      MAJOR__RACE CONDITION__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__suspicious constant operation
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__suspicious constant operation
    </key>
    <configkey>
      MINOR__RACE CONDITION__suspicious constant operation
    </configkey>
    <name>
      codepeer - suspicious constant operation
    </name>
    <description>
      An operation computes a constant value from non-constant operands.  This is characteristic of a typographical mistake, where a variable is used instead of another one, or a missing part in the operation, like the lack of conversion to a floating-point or fixed-point type before division.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__subp never returns
    </key>
    <configkey>
      INFO__WARNING__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__subp never returns
    </key>
    <configkey>
      MAJOR__WARNING__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__subp never returns
    </key>
    <configkey>
      CRITICAL__WARNING__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__subp never returns
    </key>
    <configkey>
      MINOR__WARNING__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__subp never returns
    </key>
    <configkey>
      INFO__INFORMATIONAL__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__subp never returns
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__subp never returns
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__subp never returns
    </key>
    <configkey>
      MINOR__INFORMATIONAL__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__subp never returns
    </key>
    <configkey>
      INFO__CHECK__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__subp never returns
    </key>
    <configkey>
      MAJOR__CHECK__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__subp never returns
    </key>
    <configkey>
      CRITICAL__CHECK__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__subp never returns
    </key>
    <configkey>
      MINOR__CHECK__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__subp never returns
    </key>
    <configkey>
      INFO__RACE CONDITION__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__subp never returns
    </key>
    <configkey>
      MAJOR__RACE CONDITION__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__subp never returns
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__subp never returns
    </key>
    <configkey>
      MINOR__RACE CONDITION__subp never returns
    </configkey>
    <name>
      codepeer - subp never returns
    </name>
    <description>
      The subprogram will never return, presumably because of an infinite loop. There will typically be an additional message in the subprogram body (e.g. test always false) explaining why the subprogram never returns.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__subp fails for all possible inputs
    </key>
    <configkey>
      INFO__WARNING__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__subp fails for all possible inputs
    </key>
    <configkey>
      MAJOR__WARNING__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__subp fails for all possible inputs
    </key>
    <configkey>
      CRITICAL__WARNING__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__subp fails for all possible inputs
    </key>
    <configkey>
      MINOR__WARNING__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__subp fails for all possible inputs
    </key>
    <configkey>
      INFO__INFORMATIONAL__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__subp fails for all possible inputs
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__subp fails for all possible inputs
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__subp fails for all possible inputs
    </key>
    <configkey>
      MINOR__INFORMATIONAL__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__subp fails for all possible inputs
    </key>
    <configkey>
      INFO__CHECK__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__subp fails for all possible inputs
    </key>
    <configkey>
      MAJOR__CHECK__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__subp fails for all possible inputs
    </key>
    <configkey>
      CRITICAL__CHECK__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__subp fails for all possible inputs
    </key>
    <configkey>
      MINOR__CHECK__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__subp fails for all possible inputs
    </key>
    <configkey>
      INFO__RACE CONDITION__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__subp fails for all possible inputs
    </key>
    <configkey>
      MAJOR__RACE CONDITION__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__subp fails for all possible inputs
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__subp fails for all possible inputs
    </key>
    <configkey>
      MINOR__RACE CONDITION__subp fails for all possible inputs
    </configkey>
    <name>
      codepeer - subp fails for all possible inputs
    </name>
    <description>
      Indicates that a run-time problem is likely to occur on every execution of the subprogram. There will typically be an additional message in the subprogram body explaining why the subprogram always fails.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__unprotected access
    </key>
    <configkey>
      INFO__WARNING__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__unprotected access
    </key>
    <configkey>
      MAJOR__WARNING__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__unprotected access
    </key>
    <configkey>
      CRITICAL__WARNING__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__unprotected access
    </key>
    <configkey>
      MINOR__WARNING__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__unprotected access
    </key>
    <configkey>
      INFO__INFORMATIONAL__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__unprotected access
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__unprotected access
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__unprotected access
    </key>
    <configkey>
      MINOR__INFORMATIONAL__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__unprotected access
    </key>
    <configkey>
      INFO__CHECK__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__unprotected access
    </key>
    <configkey>
      MAJOR__CHECK__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__unprotected access
    </key>
    <configkey>
      CRITICAL__CHECK__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__unprotected access
    </key>
    <configkey>
      MINOR__CHECK__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__unprotected access
    </key>
    <configkey>
      INFO__RACE CONDITION__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__unprotected access
    </key>
    <configkey>
      MAJOR__RACE CONDITION__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__unprotected access
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__unprotected access
    </key>
    <configkey>
      MINOR__RACE CONDITION__unprotected access
    </configkey>
    <name>
      codepeer - unprotected access
    </name>
    <description>
      A reentrant task (e.g. task type) reads or writes a potentially shared object without holding a lock. The message is associated with places where the object is accessed in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__unprotected shared access
    </key>
    <configkey>
      INFO__WARNING__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__unprotected shared access
    </key>
    <configkey>
      MAJOR__WARNING__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__unprotected shared access
    </key>
    <configkey>
      CRITICAL__WARNING__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__unprotected shared access
    </key>
    <configkey>
      MINOR__WARNING__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__unprotected shared access
    </key>
    <configkey>
      INFO__INFORMATIONAL__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__unprotected shared access
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__unprotected shared access
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__unprotected shared access
    </key>
    <configkey>
      MINOR__INFORMATIONAL__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__unprotected shared access
    </key>
    <configkey>
      INFO__CHECK__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__unprotected shared access
    </key>
    <configkey>
      MAJOR__CHECK__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__unprotected shared access
    </key>
    <configkey>
      CRITICAL__CHECK__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__unprotected shared access
    </key>
    <configkey>
      MINOR__CHECK__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__unprotected shared access
    </key>
    <configkey>
      INFO__RACE CONDITION__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__unprotected shared access
    </key>
    <configkey>
      MAJOR__RACE CONDITION__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__unprotected shared access
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__unprotected shared access
    </key>
    <configkey>
      MINOR__RACE CONDITION__unprotected shared access
    </configkey>
    <name>
      codepeer - unprotected shared access
    </name>
    <description>
      A task accesses a potentially shared object without holding a lock and this object is also referenced by some other task. The message is associated with places where the object is referenced in the absence of any lock, or with non-overlapping lock configuration (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__mismatched protected access
    </key>
    <configkey>
      INFO__WARNING__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__mismatched protected access
    </key>
    <configkey>
      MAJOR__WARNING__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__mismatched protected access
    </key>
    <configkey>
      CRITICAL__WARNING__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__mismatched protected access
    </key>
    <configkey>
      MINOR__WARNING__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__mismatched protected access
    </key>
    <configkey>
      INFO__INFORMATIONAL__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__mismatched protected access
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__mismatched protected access
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__mismatched protected access
    </key>
    <configkey>
      MINOR__INFORMATIONAL__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__mismatched protected access
    </key>
    <configkey>
      INFO__CHECK__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__mismatched protected access
    </key>
    <configkey>
      MAJOR__CHECK__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__mismatched protected access
    </key>
    <configkey>
      CRITICAL__CHECK__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__mismatched protected access
    </key>
    <configkey>
      MINOR__CHECK__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__mismatched protected access
    </key>
    <configkey>
      INFO__RACE CONDITION__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__mismatched protected access
    </key>
    <configkey>
      MAJOR__RACE CONDITION__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__mismatched protected access
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__mismatched protected access
    </key>
    <configkey>
      MINOR__RACE CONDITION__mismatched protected access
    </configkey>
    <name>
      codepeer - mismatched protected access
    </name>
    <description>
      A task references a potentially shared object while holding a lock, and this object is also referenced by another task without holding the same lock. Messages are associated with the second task's references (CWE 366-367, 373-374).
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__call too complex; analysis skipped
    </key>
    <configkey>
      INFO__WARNING__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__call too complex; analysis skipped
    </key>
    <configkey>
      MAJOR__WARNING__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__call too complex; analysis skipped
    </key>
    <configkey>
      CRITICAL__WARNING__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__call too complex; analysis skipped
    </key>
    <configkey>
      MINOR__WARNING__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__call too complex; analysis skipped
    </key>
    <configkey>
      INFO__INFORMATIONAL__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__call too complex; analysis skipped
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__call too complex; analysis skipped
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__call too complex; analysis skipped
    </key>
    <configkey>
      MINOR__INFORMATIONAL__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__call too complex; analysis skipped
    </key>
    <configkey>
      INFO__CHECK__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__call too complex; analysis skipped
    </key>
    <configkey>
      MAJOR__CHECK__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__call too complex; analysis skipped
    </key>
    <configkey>
      CRITICAL__CHECK__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__call too complex; analysis skipped
    </key>
    <configkey>
      MINOR__CHECK__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__call too complex; analysis skipped
    </key>
    <configkey>
      INFO__RACE CONDITION__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__call too complex; analysis skipped
    </key>
    <configkey>
      MAJOR__RACE CONDITION__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__call too complex; analysis skipped
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__call too complex; analysis skipped
    </key>
    <configkey>
      MINOR__RACE CONDITION__call too complex; analysis skipped
    </configkey>
    <name>
      codepeer - call too complex; analysis skipped
    </name>
    <description>
      Indicates that CodePeer skipped analyzing the subprogram call to avoid exhausting resources needed for analyzing the remainder of the system. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__subp not available; call not analyzed
    </key>
    <configkey>
      INFO__WARNING__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__subp not available; call not analyzed
    </key>
    <configkey>
      MAJOR__WARNING__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__subp not available; call not analyzed
    </key>
    <configkey>
      CRITICAL__WARNING__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__subp not available; call not analyzed
    </key>
    <configkey>
      MINOR__WARNING__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__subp not available; call not analyzed
    </key>
    <configkey>
      INFO__INFORMATIONAL__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__subp not available; call not analyzed
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__subp not available; call not analyzed
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__subp not available; call not analyzed
    </key>
    <configkey>
      MINOR__INFORMATIONAL__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__subp not available; call not analyzed
    </key>
    <configkey>
      INFO__CHECK__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__subp not available; call not analyzed
    </key>
    <configkey>
      MAJOR__CHECK__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__subp not available; call not analyzed
    </key>
    <configkey>
      CRITICAL__CHECK__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__subp not available; call not analyzed
    </key>
    <configkey>
      MINOR__CHECK__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__subp not available; call not analyzed
    </key>
    <configkey>
      INFO__RACE CONDITION__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__subp not available; call not analyzed
    </key>
    <configkey>
      MAJOR__RACE CONDITION__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__subp not available; call not analyzed
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__subp not available; call not analyzed
    </key>
    <configkey>
      MINOR__RACE CONDITION__subp not available; call not analyzed
    </configkey>
    <name>
      codepeer - subp not available; call not analyzed
    </name>
    <description>
      Indicates that CodePeer cannot analyze the call because the called subprogram is not available. There are two possible reasons for this: the .scil file for the called subprogram is not supplied in the library file, or the called subprogram is analyzed in a different partition. CodePeer will report any presumptions it makes about the results/effects of the otherwise unanalyzed call. These should be reviewed to be sure they are appropriate.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__High
    </key>
    <configkey>
      INFO__WARNING__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__High
    </key>
    <configkey>
      MAJOR__WARNING__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__High
    </key>
    <configkey>
      CRITICAL__WARNING__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__High
    </key>
    <configkey>
      MINOR__WARNING__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__High
    </key>
    <configkey>
      INFO__INFORMATIONAL__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__High
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__High
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__High
    </key>
    <configkey>
      MINOR__INFORMATIONAL__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__High
    </key>
    <configkey>
      INFO__CHECK__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__High
    </key>
    <configkey>
      MAJOR__CHECK__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__High
    </key>
    <configkey>
      CRITICAL__CHECK__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__High
    </key>
    <configkey>
      MINOR__CHECK__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__High
    </key>
    <configkey>
      INFO__RACE CONDITION__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__High
    </key>
    <configkey>
      MAJOR__RACE CONDITION__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__High
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__High
    </key>
    <configkey>
      MINOR__RACE CONDITION__High
    </configkey>
    <name>
      codepeer - High
    </name>
    <description>
      High likelihood there is a defect on this line of code. It is likely to cause a problem on every execution, or the problem detected is known to be always true (even if not necessarily a bug, e.g. dead code)
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__Medium
    </key>
    <configkey>
      INFO__WARNING__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__Medium
    </key>
    <configkey>
      MAJOR__WARNING__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__Medium
    </key>
    <configkey>
      CRITICAL__WARNING__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__Medium
    </key>
    <configkey>
      MINOR__WARNING__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__Medium
    </key>
    <configkey>
      INFO__INFORMATIONAL__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__Medium
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__Medium
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__Medium
    </key>
    <configkey>
      MINOR__INFORMATIONAL__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__Medium
    </key>
    <configkey>
      INFO__CHECK__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__Medium
    </key>
    <configkey>
      MAJOR__CHECK__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__Medium
    </key>
    <configkey>
      CRITICAL__CHECK__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__Medium
    </key>
    <configkey>
      MINOR__CHECK__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__Medium
    </key>
    <configkey>
      INFO__RACE CONDITION__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__Medium
    </key>
    <configkey>
      MAJOR__RACE CONDITION__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__Medium
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__Medium
    </key>
    <configkey>
      MINOR__RACE CONDITION__Medium
    </configkey>
    <name>
      codepeer - Medium
    </name>
    <description>
      Moderate likelihood there is a defect on this line of code. It may cause a problem on some executions.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__Low
    </key>
    <configkey>
      INFO__WARNING__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__Low
    </key>
    <configkey>
      MAJOR__WARNING__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__Low
    </key>
    <configkey>
      CRITICAL__WARNING__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__Low
    </key>
    <configkey>
      MINOR__WARNING__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__Low
    </key>
    <configkey>
      INFO__INFORMATIONAL__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__Low
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__Low
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__Low
    </key>
    <configkey>
      MINOR__INFORMATIONAL__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__Low
    </key>
    <configkey>
      INFO__CHECK__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__Low
    </key>
    <configkey>
      MAJOR__CHECK__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__Low
    </key>
    <configkey>
      CRITICAL__CHECK__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__Low
    </key>
    <configkey>
      MINOR__CHECK__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__Low
    </key>
    <configkey>
      INFO__RACE CONDITION__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__Low
    </key>
    <configkey>
      MAJOR__RACE CONDITION__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__Low
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__Low
    </key>
    <configkey>
      MINOR__RACE CONDITION__Low
    </configkey>
    <name>
      codepeer - Low
    </name>
    <description>
      There is a small chance there is a defect on the given line of code. It is worth investigating when other (high, medium) messages have been reviewed, or when trying to eliminate any possibility of incorrect execution.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__Informational
    </key>
    <configkey>
      INFO__WARNING__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__Informational
    </key>
    <configkey>
      MAJOR__WARNING__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__Informational
    </key>
    <configkey>
      CRITICAL__WARNING__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__Informational
    </key>
    <configkey>
      MINOR__WARNING__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__Informational
    </key>
    <configkey>
      INFO__INFORMATIONAL__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__Informational
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__Informational
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__Informational
    </key>
    <configkey>
      MINOR__INFORMATIONAL__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__Informational
    </key>
    <configkey>
      INFO__CHECK__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__Informational
    </key>
    <configkey>
      MAJOR__CHECK__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__Informational
    </key>
    <configkey>
      CRITICAL__CHECK__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__Informational
    </key>
    <configkey>
      MINOR__CHECK__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__Informational
    </key>
    <configkey>
      INFO__RACE CONDITION__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__Informational
    </key>
    <configkey>
      MAJOR__RACE CONDITION__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__Informational
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__Informational
    </key>
    <configkey>
      MINOR__RACE CONDITION__Informational
    </configkey>
    <name>
      codepeer - Informational
    </name>
    <description>
      Information about the code (e.g. subprogram not analyzed) or more details about the current message is provided via informational messages.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__Suppressed
    </key>
    <configkey>
      INFO__WARNING__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__Suppressed
    </key>
    <configkey>
      MAJOR__WARNING__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__Suppressed
    </key>
    <configkey>
      CRITICAL__WARNING__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__Suppressed
    </key>
    <configkey>
      MINOR__WARNING__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__Suppressed
    </key>
    <configkey>
      INFO__INFORMATIONAL__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__Suppressed
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__Suppressed
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__Suppressed
    </key>
    <configkey>
      MINOR__INFORMATIONAL__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__Suppressed
    </key>
    <configkey>
      INFO__CHECK__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__Suppressed
    </key>
    <configkey>
      MAJOR__CHECK__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__Suppressed
    </key>
    <configkey>
      CRITICAL__CHECK__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__Suppressed
    </key>
    <configkey>
      MINOR__CHECK__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__Suppressed
    </key>
    <configkey>
      INFO__RACE CONDITION__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__Suppressed
    </key>
    <configkey>
      MAJOR__RACE CONDITION__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__Suppressed
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__Suppressed
    </key>
    <configkey>
      MINOR__RACE CONDITION__Suppressed
    </configkey>
    <name>
      codepeer - Suppressed
    </name>
    <description>
      The message is very likely uninteresting and was suppressed automatically by CodePeer. Suppression of messages is controlled by the :file:`MessagePatterns.xml` file, and is used to e.g. suppress messages about internally generated variables or constructs, not directly relevant to the source code.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__current (now)
    </key>
    <configkey>
      INFO__WARNING__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__current (now)
    </key>
    <configkey>
      MAJOR__WARNING__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__current (now)
    </key>
    <configkey>
      CRITICAL__WARNING__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__current (now)
    </key>
    <configkey>
      MINOR__WARNING__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__current (now)
    </key>
    <configkey>
      INFO__INFORMATIONAL__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__current (now)
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__current (now)
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__current (now)
    </key>
    <configkey>
      MINOR__INFORMATIONAL__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__current (now)
    </key>
    <configkey>
      INFO__CHECK__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__current (now)
    </key>
    <configkey>
      MAJOR__CHECK__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__current (now)
    </key>
    <configkey>
      CRITICAL__CHECK__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__current (now)
    </key>
    <configkey>
      MINOR__CHECK__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__current (now)
    </key>
    <configkey>
      INFO__RACE CONDITION__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__current (now)
    </key>
    <configkey>
      MAJOR__RACE CONDITION__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__current (now)
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__current (now)
    </key>
    <configkey>
      MINOR__RACE CONDITION__current (now)
    </configkey>
    <name>
      codepeer - current (now)
    </name>
    <description>
      A current message is one that appears in the current review, regardless of whether it appeared in any prior review. If no historical database is being kept, all messages are current.  The current review is always the review currently being viewed though the CodePeer browser interface.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__new (added)
    </key>
    <configkey>
      INFO__WARNING__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__new (added)
    </key>
    <configkey>
      MAJOR__WARNING__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__new (added)
    </key>
    <configkey>
      CRITICAL__WARNING__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__new (added)
    </key>
    <configkey>
      MINOR__WARNING__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__new (added)
    </key>
    <configkey>
      INFO__INFORMATIONAL__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__new (added)
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__new (added)
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__new (added)
    </key>
    <configkey>
      MINOR__INFORMATIONAL__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__new (added)
    </key>
    <configkey>
      INFO__CHECK__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__new (added)
    </key>
    <configkey>
      MAJOR__CHECK__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__new (added)
    </key>
    <configkey>
      CRITICAL__CHECK__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__new (added)
    </key>
    <configkey>
      MINOR__CHECK__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__new (added)
    </key>
    <configkey>
      INFO__RACE CONDITION__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__new (added)
    </key>
    <configkey>
      MAJOR__RACE CONDITION__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__new (added)
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__new (added)
    </key>
    <configkey>
      MINOR__RACE CONDITION__new (added)
    </configkey>
    <name>
      codepeer - new (added)
    </name>
    <description>
      A new (or added) message is one that appears in the current review but not the base one. New messages have a `+` indicator in the left column in the File Source view and in the `+/-` column in the Per-File Message Status Window. If no historical database is being kept, the new designation is not made.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__dropped
    </key>
    <configkey>
      INFO__WARNING__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__dropped
    </key>
    <configkey>
      MAJOR__WARNING__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__dropped
    </key>
    <configkey>
      CRITICAL__WARNING__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__dropped
    </key>
    <configkey>
      MINOR__WARNING__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__dropped
    </key>
    <configkey>
      INFO__INFORMATIONAL__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__dropped
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__dropped
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__dropped
    </key>
    <configkey>
      MINOR__INFORMATIONAL__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__dropped
    </key>
    <configkey>
      INFO__CHECK__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__dropped
    </key>
    <configkey>
      MAJOR__CHECK__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__dropped
    </key>
    <configkey>
      CRITICAL__CHECK__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__dropped
    </key>
    <configkey>
      MINOR__CHECK__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__dropped
    </key>
    <configkey>
      INFO__RACE CONDITION__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__dropped
    </key>
    <configkey>
      MAJOR__RACE CONDITION__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__dropped
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__dropped
    </key>
    <configkey>
      MINOR__RACE CONDITION__dropped
    </configkey>
    <name>
      codepeer - dropped
    </name>
    <description>
      A dropped message is one that appears in the base review but not in the current review. Dropped messages have a `-` indicator in the `+/-` column in the Per-File Message Status window. If no historical database is being kept, no dropped messages will be displayed.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__base (baseline)
    </key>
    <configkey>
      INFO__WARNING__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__base (baseline)
    </key>
    <configkey>
      MAJOR__WARNING__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__base (baseline)
    </key>
    <configkey>
      CRITICAL__WARNING__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__base (baseline)
    </key>
    <configkey>
      MINOR__WARNING__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__base (baseline)
    </key>
    <configkey>
      INFO__INFORMATIONAL__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__base (baseline)
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__base (baseline)
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__base (baseline)
    </key>
    <configkey>
      MINOR__INFORMATIONAL__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__base (baseline)
    </key>
    <configkey>
      INFO__CHECK__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__base (baseline)
    </key>
    <configkey>
      MAJOR__CHECK__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__base (baseline)
    </key>
    <configkey>
      CRITICAL__CHECK__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__base (baseline)
    </key>
    <configkey>
      MINOR__CHECK__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__base (baseline)
    </key>
    <configkey>
      INFO__RACE CONDITION__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__base (baseline)
    </key>
    <configkey>
      MAJOR__RACE CONDITION__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__base (baseline)
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__base (baseline)
    </key>
    <configkey>
      MINOR__RACE CONDITION__base (baseline)
    </configkey>
    <name>
      codepeer - base (baseline)
    </name>
    <description>
      A base message is one that appears in the base code review, regardless of whether it appears in the current review.  The base review is a prior review against which the current review is compared, in the CodePeer Overview. Any CodePeer Overview has exactly one base review, or none, if no historical database is specified.  A baseline review is a review run with the -baseline run time option. This makes the review eligible for being used as the default base review for future analyses, in the absence of an explicit -cutoff parameter. There may be many baseline reviews over time, but not all reviews are baseline reviews.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__WARNING__deltas
    </key>
    <configkey>
      INFO__WARNING__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__WARNING__deltas
    </key>
    <configkey>
      MAJOR__WARNING__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__WARNING__deltas
    </key>
    <configkey>
      CRITICAL__WARNING__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__WARNING__deltas
    </key>
    <configkey>
      MINOR__WARNING__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__INFORMATIONAL__deltas
    </key>
    <configkey>
      INFO__INFORMATIONAL__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__INFORMATIONAL__deltas
    </key>
    <configkey>
      MAJOR__INFORMATIONAL__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__INFORMATIONAL__deltas
    </key>
    <configkey>
      CRITICAL__INFORMATIONAL__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__INFORMATIONAL__deltas
    </key>
    <configkey>
      MINOR__INFORMATIONAL__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__CHECK__deltas
    </key>
    <configkey>
      INFO__CHECK__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__CHECK__deltas
    </key>
    <configkey>
      MAJOR__CHECK__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__CHECK__deltas
    </key>
    <configkey>
      CRITICAL__CHECK__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__CHECK__deltas
    </key>
    <configkey>
      MINOR__CHECK__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
  <rule>
    <key>
      INFO__RACE CONDITION__deltas
    </key>
    <configkey>
      INFO__RACE CONDITION__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      INFO
    </priority>
  </rule>
  <rule>
    <key>
      MAJOR__RACE CONDITION__deltas
    </key>
    <configkey>
      MAJOR__RACE CONDITION__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MAJOR
    </priority>
  </rule>
  <rule>
    <key>
      CRITICAL__RACE CONDITION__deltas
    </key>
    <configkey>
      CRITICAL__RACE CONDITION__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      CRITICAL
    </priority>
  </rule>
  <rule>
    <key>
      MINOR__RACE CONDITION__deltas
    </key>
    <configkey>
      MINOR__RACE CONDITION__deltas
    </configkey>
    <name>
      codepeer - deltas
    </name>
    <description>
      The deltas column contains the count of messages dropped (-) and/or added (+) between the base and the current review.
    </description>
    <priority>
      MINOR
    </priority>
  </rule>
</rules>
